<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_jtei.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_jtei.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" rend="jTEI">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title type="main">Texts as Hypergraphs: an Intuitive Representation of the Nature of
               Text.</title>
            <author>
               <name>
                  <forename>Elli</forename>
                  <surname>Bleeker</surname>
               </name>
               <name><forename>Ronald</forename><surname>Haentjens Dekker</surname></name>
               <name><forename>Bram</forename><surname>Buitendijk</surname></name>
               <affiliation>The authors are part of the R&amp;D group of the Humanities Cluster of
                  the Royal Dutch Academy for Arts and Sciences.</affiliation>
               <email>elli.bleeker@gmail.com</email>
            </author>
         </titleStmt>
         <publicationStmt>
            <publisher>TEI Consortium</publisher>
            <date/>
            <availability>
               <licence target="https://creativecommons.org/licenses/by/4.0/">
                  <p>For this publication a Creative Commons Attribution 4.0 International license
                     has been granted by the author(s) who retain full copyright.</p>
               </licence>
            </availability>
         </publicationStmt>
         <sourceDesc>
            <p>No source, born digital.</p>
         </sourceDesc>
      </fileDesc>
      <encodingDesc>
         <projectDesc>
            <p>Revues.org -centre for open electronic publishing- is the platform for journals in
               the humanities and social sciences, open to quality periodicals looking to publish
               full-text articles online.</p>
         </projectDesc>
      </encodingDesc>
      <profileDesc>
         <langUsage>
            <language ident="en">en</language>
         </langUsage>
         <textClass>
            <keywords xml:lang="en">
               <term>markup</term>
               <term>digital editing</term>
               <term>genetic criticism</term>
               <term>text modeling</term>
               <term>overlap</term>
               <term>data models for text</term>
            </keywords>
         </textClass>
      </profileDesc>
      <revisionDesc>
         <change/>
      </revisionDesc>
   </teiHeader>
   <text>
      <front>
         <div type="abstract" xml:id="abstract">
            <p>Over the past decades, the question of <mentioned>what text really is</mentioned> has
               been addressed by a large number of conferences, workshops, articles, and blog posts.
               If there is one thing that, taken together, those contributions illustrate, it is
               that our understanding of text is – and has been – constantly in flux and open for
               many interpretations. This flexible and heterogeneous understanding of text is
               reflected by the TEI Guidelines: users can mix modules and elements in order to come
               to their encoding model of choice. As a result, most encoding models are based on a
               scholar conceptual understanding of a text and their research interest in a text.
               Still, there often are significant gaps between how a scholar conceptually thinks
               about text, how this translates to an encoding model, and how a computer understands
               the encoded text. Put differently: how an encoding looks to a human reader often
               differs from the way that information is stored on a computer.</p>
            <p>In the present contribution, we illustrate how the Text-As-Graph (TAG) hypergraph
               data model and the associated syntax TAGML can be employed to express and store
               textual features in a way that corresponds more closely with the scholar’s
               understanding of it. TAG’s functional design is based on the objective to reconcile
               the conceptual model, the encoding model and the informational model. The
               expressiveness of the syntax TAGML allows scholars to digitally represent their
               understanding of a text in a more explicit and formal manner. This information is
               then stored in the hypergraph data model for text. Consequently, a TAGML processor
               will not require any application layer in order for the text to be processed,
               queried, and analysed as it is intended and understood by the encoder. Finally, TAG’s
               approach will also promote the sustainability, archivability, and reuse of the text
               encoding.</p>
         </div>
      </front>
      <body>

         <div xml:id="intro">
            <head>Introduction</head>
            <p>Over the past decades, the question of <mentioned>what text really is</mentioned> has
               been addressed by a large number of conferences, workshops, articles, and blog posts.
               If there is one thing that, taken together, those contributions illustrate, it is
               that our understanding of text is – and has been – constantly in flux and open for
               many interpretations. This flexible and heterogeneous understanding of text is
               reflected by the TEI Guidelines: users can mix modules and elements in order to come
               to their encoding model of choice. As a result, most encoding models are based on a
               scholar conceptual understanding of a text and their research interest in a text.
               Still, there often are significant gaps between how a scholar conceptually thinks
               about text, how this translates to an encoding model, and how a computer understands
               the encoded text. Put differently: how an encoding looks to a human reader often
               differs from the way that information is stored on a computer.</p>
            <p>A clear example of this lack of congruence is seen with what we call <term
                  xml:id="nonlinear">non-linear text</term>, a textual phenomenon often present on
               historical or literary documents in the form of deletions and additions. We consider
               text to be non-linear when there is more than one order in which words or characters
               may be placed without influencing the semantics of the text. A straightforward
               example is the sentence <eg>This is a <hi rend="strike-out">first</hi>
                  <hi rend="addition">second</hi> attempt.</eg> From the perspective of a human
               reader, the deleted and the added word represent two readings of the character
               sequence. The deleted and the added word are located at the same position in the text
               sequence and they are mutually exclusive: reading from left to right, the sentence
               either says <eg>this is a first attempt</eg> or <eg>this is a second attempt</eg>. We
               say that the text characters are <term>fully ordered</term> until the point where the
               variation occurs (at the crossed-out word <q>first</q>). At this point, the text
               characters are <term>unordered</term>. The two reading paths converge again after the
               variation ends, so the text characters are again fully ordered after the addition. We
               therefore also call non-linear text <term>partially ordered text</term>.</p>
            <p>From an informational perspective, however, the partially-orderedness as perceived by
               a human reader is not represented as such in the underlying data model. In TEI XML,
               partially ordered text may be encoded like this: <egXML
                  xmlns="http://www.tei-c.org/ns/Examples"><s>This is a
                        <del>first</del><add>second</add> attempt.</s></egXML> As human readers, we
               assume that if the <gi>del</gi> and <gi>add</gi> elements were to be placed in a
               different order, they would not have the same meaning (see <ref type="bibl"
                  target="#dekk2017">Haentjens Dekker and Birnbaum</ref>and <ref type="bibl"
                  target="#dekk2018">Haentjens Dekker et al.</ref>). However, in XML, all text and
               markup are typically ordered.<note>Only XML attributes and XML attribute values are
                  unordered.</note> In order for an XML processor to understand that the markup
               element <gi>subst</gi> expresses the start of partially ordered text, it needs to
               have access to an application layer like a schema that explains the semantic meaning
               of the markup tag. The more responsibility is delegated to additional application
               layers, the more complex the processing of the XML document becomes.<note>See also
                     <ref type="bibl" xml:id="quoteref1" target="#sper2008">Sperberg-McQueen and
                     Huitfeldt</ref>, who point out that any mechanisms defined by the TEI to
                  express textual features like discontinuity are not understood or supported by
                  generic XML tools; <quote source="#quoteref1">they require vocabulary-specific
                     support by a different layer of code</quote>, and by <ref target="#per2009"
                     type="bibl" xml:id="quoteref2">Peroni and Vitali</ref> who state that a TEI XML
                  document with specific markup that requires to be <quote source="#quoteref2"
                     >understood and exploited by a very specific and application-dependent
                     tool</quote> defeats the purpose of switching to XML in the first place. This
                  line of reasoning reflects the software development principle of Separation of
                  Concerns, which sets out to decrease complexity, promote sustainable development,
                  and facilitate the maintenance of code.</note> Ideally, therefore, one likes to
               avoid depending on the application layer(s) for TEI XML documents to be processed in
               accordance with a scholar’s expectations. That means information about non-linearity
               and other alternative text structures or orderings should be part of the data model
               and not the application layer(s). Once a data model is able to represent and store as
               many properties of a text as possible, the application layer(s) do(es) not need to
               supplement the model and can focus on actual application-level tasks instead (<ref
                  type="bibl" target="#dekk2017">Haentjens Dekker and Birnnaum</ref>).</p>
            <p>In the present contribution, we illustrate this line of reasoning argument with the
                  <ref target="https://huygensing.github.io/TAG/">Text-As-Graph (TAG)</ref>
               hypergraph data model and the associated syntax <ref
                  target="https://github.com/HuygensING/TAG/tree/master/TAGML">TAGML</ref>. Both TAG
               and TAGML are designed to express and store textual features in a way that
               corresponds more closely with the scholar’s understanding of it. TAG’s functional
               design is based on the objective to reconcile the conceptual model, the encoding
               model and the data model. The expressiveness of the syntax TAGML allows scholars to
               digitally represent their understanding of a text in a more explicit and formal
               manner. This information is then stored in the hypergraph data model for text.
               Consequently, a TAGML processor will not require any application layer in order for
               the text to be processed, queried, and analysed as it is intended and understood by
               the encoder. Finally, TAG’s approach will also promote the sustainability,
               archivability, and reuse of the text encoding. </p>
            <p>The textual examples used in this article come from modern manuscripts (i.e.,
               authorial holographs and drafts dating from the late nineteenth, early twentieth
               century) that are encoded from a genetic perspective on text, meaning that the
               encoder is interested in capturing the various textual revisions in great detail.
               This interest, combined with the type of manuscript material, presents the encoder
               with textual features that are notoriously complex to model in TEI XML: overlapping
               text structures, discontinuous text, and non-linear text are more rule than
               exception. After a brief description of the research objectives of the field followed
               by an illustration of three textual features, the article goes on to describe the
               main characteristics of the TAG model. The third and final section of the article
               addresses the theoretical and practical implications of using TAGML to express the
               example texts from the first section. By contrasting the TAG model with the TEI XML
               model, the article illustrates how a text encoded in TAGML is understood and
               processed in a way that is closer to the genetic scholar’s understanding of the
               text.</p>
            <p>Before we proceed, it will be good to clarify what we understand by the terms
                  <term>text</term>, <term>information</term> and <term>data</term>. These concepts
               are sometimes used interchangeably; depending on the context they may refer to the
               same thing, or not. In an attempt to avoid confusion, this contribution uses
                  <term>text</term> for the inscriptions that can be found on source documents and
               that carry a certain meaning which is derived by the reader. Text can therefore be
               understood as both a tangible construct (inscriptions on a material carrier) and an
               intangible construct (the meaning, understanding or interpretation of these
               inscriptions). In order to render text computer-readable, it can be expressed as a
               character sequence of letters, spaces and punctuation. In XML terminology this format
               is described as <term>parseable character data</term> or <term>PCDATA</term>. Markup
               can be used to give the PCDATA extra meaning. Transforming one’s understanding of a
               text into a machine-readable data format – a string of characters, a tree, or a graph
               – inevitably entails a reduction of information: few, if any, data formats suffice to
               express the complexities of the original object. Of course, it is exactly the poverty
               of models that makes it possible to implement them: a complete map of the world would
               be the size of the world itself (<ref target="#moret2000" type="bibl">Moretti
                  2000</ref>, <ref target="#pier2015" type="bibl">Pierazzo 2015, 38</ref>).
               Nevertheless, as this contribution will demonstrate, there is much value in choosing
               a rich data model that is in close agreement with our conceptual understanding of
               text.</p>
         </div>
         <div xml:id="genetic-research">
            <head>Textual Genetic Research and Text Modeling</head>
            <div xml:id="objectives">
               <head>Research Objectives</head>
               <p>The field of textual genetic research is concerned with the way literary texts
                  originate and develop over time. To this end, draft manuscripts provide a great
                  source of information as the writings on these documents often reflect the
                  author’s train of thought: words are crossed out, sentences are added, paragraphs
                  transposed… In other words, draft manuscripts represent traces of a writing
                  process and by extension the creation and development of a literary work. Since
                  that’s exactly what textual genetic scholars intend to capture and study, it’s
                  important that information related to the writing process is expressed as detailed
                  as possible. Additionally, textual genetic editors set out to store and represent
                  the results of their research in such a way, that it can be explored by others.
                  This may be in a digital research environment or a digital scholarly
                     edition.<note>Examples of digital research environments and editions
                     specifically aimed at supporting and presenting textual genetic research
                     include the <ref target="https://www.beckettarchive.org/">Beckett Digital
                        Manuscript Project</ref> (created by Dirk van Hulle and Vincent Neyt,
                     ongoing); the <ref target="http://research.cch.kcl.ac.uk/proust_prototype/"
                        >prototype</ref> of an opening from a notebook of Marcel Proust (created by
                     Julie André and Elena Pierazzo); the <ref target="http://faustedition.net/"
                        >genetic edition</ref> of Johann Wolfgang Goethe’s <title>Faust</title>
                     (edited by Anne Bohnenkamp et al); the <ref
                        target="https://www.beckettarchive.org/ads/Ads.htm">electronic edition</ref>
                     of Willem Elsschot’s <title>Achter de Schermen</title> (edited by De Bruin et
                     al, 2007); and the <ref target="https://rotunda.upress.virginia.edu/melville/"
                        >Fluid Text edition</ref> of Herman Melville’s <title>Typee</title> (edited
                     by John Bryant, 2006). All links were last accessed on <date when="2020-02-25"
                        >February 25, 2020</date> in a Mozilla Firefox browser.</note></p>
               <p>In order to adequately represent and study a text’s genesis, editors typically (1)
                  express textual variation within one text; (2) map the relationships between texts
                  and documents related to the genesis of a text; and (3) compare textual variation
                  across documents; i.e., textual collation.<note>It’s not within the scope of this
                     article to survey describe this workflow in more detail, or to survey the
                     digital tools that support the activities within this scholarly
                     workflow.</note> A tool used to support either of these activities needs to
                  recognise the kind of information that is relevant for textual genesis and –
                  ideally – also ensure that this information is retained throughout the processing.
                  For example: if a tool ignores or discards the information about an author’s
                  revision process because it isn’t able to recognise the way this information is
                  encoded, it will have serious consequences for the analysis of the text’s genesis.
                  Incidentally, although we use examples from textual genetic studies throughout
                  this article, it may be noted that this principle applies to a wide variety of
                  text encoding and text processing.</p>
            </div>
            <div xml:id="features">
               <head>Complex Textual Features</head>
               <p>Occurrences of non-linear text structures are many and various and can get very
                  complex very fast. For reasons of clarity and brevity, the following paragraphs
                  discuss three simple examples of complex textual structures. For more complex
                  cases, see <!-- add link to appendix? Or maybe on the TAGML website? -->. Unless
                  indicated otherwise, the examples come from the authorial holograph of <title>To
                     the Lighthouse</title> by <ref type="bibl" target="#woolf1927">Virginia
                     Woolf</ref>.</p>
               <div xml:id="nonlinearity">
                  <head>Non-linearity</head>
                  <p>As mentioned <ref target="#nonlinear">above</ref>, we understand non-linear
                     text as having multiple paths through a text: a sequence of words or characters
                     that splits into two or more branches, for instance at the point where
                     variation in the text occurs that join together again at the end of the
                     variation. The encoder can use markup in order to mark the location of the
                        <term>branching</term> of the text. The three figures below present cases of
                     non-linearity:</p>
                  <div xml:id="deletion">
                     <head>Single Deletion or Addition</head>
                     <p>In this example, the words <q>impossible barriers</q> are striked through by
                        the author. This means that there are at least two variant states of the
                        text, one including the deletion and one excluding it: <q>difference of
                           opinion, impossible barriers, prejudices</q> or <q>difference of opinion,
                           prejudices</q>.<figure xml:id="single_deletion">
                           <graphic url="img/single_deletion.png" width="620px" height="980px"/>
                           <head type="legend">A single deletion. Fol. 27; SD p. 13.</head>
                           <head type="license">The authors are grateful to and acknowledge the
                              Society of Authors as the Literary Representative of the Estate of
                              Virginia Woolf. You may not use the Woolf material for commercial
                              purposes. Please credit the copyright holder when reusing this work.
                           </head>
                        </figure></p>
                  </div>
                  <div xml:id="immediate-del">
                     <head>Immediate Deletion</head>
                     <p>An immediate revision, also called by its latin term <term>currente
                           calamo</term>, means that the revision is made during the first spell of
                        writing (and not when the author later returns to the text to make
                        corrections). The example in <ref target="immediate_del">figure 2</ref>
                        shows how Woolf started the sentence with the word <q>This</q> and
                        immediately corrected it to <q>The</q>. This means that there is no other
                        way of reading the text; no variant state that does not include the
                        revision, simply one path: <q>This The idea has grown...</q><figure
                           xml:id="immediate_del">
                           <graphic url="img/immediate_del.png" width="620px" height="980px"/>
                           <head type="legend">An immediate deletion. Fol. 7; SD p. 3; Names to be
                              used.</head>
                        </figure></p>
                  </div>
                  <div xml:id="grouped-rev">
                     <head>Grouped Revision</head>
                     <p>We already saw an example of a grouped revision in the introduction; <ref
                           target="grouped_rev">figure 3</ref> represents another case: <q>for being
                           so certainly disagreeable</q>. The grouped revision is very similar to
                        the single deletion and the single addition: again, there are two ways of
                        reading the text, one including the word that has been deleted, and one
                        without that word and including the addition. However, in the case of a
                        grouped revision, scholars encode that the deletion and the addition belong
                        together semantically. In TEI XML this can be indicated by grouping them
                        with the <gi>subst</gi> element (see also the example in the introduction).
                        Conceptually, this implies that the order of the contents of the
                           <gi>subst</gi> element are placed is temporarily irrelevant. The two
                        words – <q>so</q> and <q>certainly</q> – alternate and are mutually
                        exclusive: whether we choose the original reading so or the corrected
                        reading certainly, they are at the same distance from the beginning of the
                           sentence.<figure xml:id="grouped_rev">
                           <graphic url="img/grouped_rev.png" width="680px" height="980px"/>
                           <head type="legend">A grouped revision. Fol. 13; SD p. 6.</head>
                        </figure></p>
                  </div>
                  <div xml:id="other-cases">
                     <head>Other Cases of Nonlinearity</head>
                     <p>Note that in the examples so far, the branching of the text occurs on the
                        original source manuscript; markup is used to flag the start and end of the
                        nonlinearity. However, there are also cases in which an encoder would like
                        to represent nonlinear information that is not on the original source
                        document. The TEI markup elements <gi>app</gi> and <gi>choice</gi>, for
                        instance, have a similar effect of partially ordered information: they group
                        together <quote source="#quoteref3">a number of alternative encodings for
                           the same point in a text</quote> (<ref type="bibl" xml:id="quoteref3"
                           target="#TEI2019">TEI P5, chapter 3.4</ref>. As a consequence, he
                        contents of the <gi>choice</gi> element are placed have no influence on the
                        semantic meaning. <!-- TODO: voorbeeld toevoegen --></p>
                  </div>
               </div>
               <div xml:id="discontinuity">
                  <head>Discontinuity</head>
                  <p>Discontinuity happens when a text forms semantically a single continuous
                     utterance, but is interrupted by other elements. The example in figure 4 is
                     taken from a question on the TEI-L <!-- REF toevoegen -->and presents an
                     interesting case in which a narrator (Marion) cites a letter she has received.
                     She intersperses this citation, however, with her own comments upon the text of
                     the letter (<q>wrote Ada</q> and <q>I had told them
                     so</q>).<!-- Noot: Ik wil hier graag een tekstgenetisch voorbeeld van geven, zoals een "del" 
                        die betrekking heeft op meerdere maar niet alle woorden in een zin. Ik ken dit uit Anne Frank 
                        maar ben nog op zoek naar voorbeelden uit andere documenten. 
                        Tot ik die heb gevonden gebruik ik dit voorbeeld. -->
                     Ideally, the citation is encoded as one single expression instead of three
                     separate expressions. <figure xml:id="discontinuity1">
                        <graphic url="img/discontinuity1.png" width="680px" height="980px"/>
                        <head type="legend">An example of discontinuity in a running text (<ref
                              target="#watanna1916" type="bibl">Watanna 1916, p.171</ref>)</head>
                        <head type="license">Work is in public domain.</head>
                     </figure></p>
               </div>
               <div xml:id="overlap">
                  <head>Overlapping textual structures</head>
                  <p>One of the most (in)famous examples of textual characteristics that do not fit
                     naturally in the prevalent XML data model for text, is the case of multiple and
                     overlapping structures. As a result, simply mentioning the word
                        <term>overlap</term> at a TEI conference or a Balisage Markup conference is
                     sure to get everyone’s attention. As textual genetic scholars are equally
                     interested in both the material, documentary aspects as well as the sequential,
                     textual aspects of a given work, they are well familiar with the challenge of
                     modeling co-existing and/or overlapping text structures (<ref
                        target="#dillen2015" type="bibl">Dillen 2015</ref>, namely chapter 2.3, 2.4,
                     and 5.2; <ref target="#bleeker2017" type="bibl">Bleeker 2017</ref>, namely
                     chapter 1.3, 2.2, and 4.2).</p>
                  <p><ref type="crossref" target="#discontinuity2-1">Figure 5</ref> and <ref
                        type="crossref" target="#discontinuity2-2">figure 6</ref> present a good
                     example, found on the pages of a 1929 typescript of <title>Sheherazade, of: Wat
                        is liefde zonder verleiding</title> (Sheherazade, or: what is love without
                     seduction) by writer Raymond Brulez. During the revision of his own typescript,
                     the author decided to cross out two entire paragraphs that also cross document
                     borders. As a consequence, there are at least two overlapping structures: the
                     deletion of two paragraphs that run over document borders. <figure
                        xml:id="discontinuity2-1">
                        <graphic url="img/discontinuity2-1.jpg" width="170px" height="245px"/>
                        <head type="legend">The quarto typescript of <title>Sheherazade</title>
                              (<ref type="bibl" target="#brulez1927">Brulez</ref> 1927), p.3.</head>
                        <head type="license"/>
                     </figure>
                     <figure xml:id="discontinuity2-2">
                        <graphic url="img/discontinuity2-2.jpg" width="170px" height="245px"/>
                        <head type="legend">The quarto typescript of <title>Sheherazade</title>
                              (<ref type="bibl" target="#brulez1927">Brulez</ref> 1927), p.4.</head>
                        <head type="license"/>
                     </figure></p>
                  <p>Taken together, the examples in this section show that in order to properly
                     support textual genetic analysis, then, a data model needs to understand that
                     information can be non-linear, discontinuous, or that it may have multiple,
                     co-existing structures. Evidently, this is not a novel conclusion: almost a
                     soon as the OHCO model of XML had been introduced to the text encoding
                     community, researchers have tried to come up with alternative data models that
                     would be a better fit for the notion of text as a multi-hierarchical (or
                     hierarchy-less) data structure.<note> Again, it’s not within the scope of the
                        present article to give a comprehensive overview of these alternative
                        models. Those interested in this discussion will find the work of Allen H.
                        Renear et al. a useful starting point, or to take a look at the MLCD Overlap
                        Corpus, which stems from the project Markup Languages for Complex Documents
                           (<ref
                           target="https://ischool.illinois.edu/research/projects/markup-languages-complex-documents"
                           >MLCD</ref>).We can also recommend <ref
                           target="http://www.balisage.net/Proceedings/topics/Concurrent_Markup~Overlap.html"
                           >searching for the topic</ref>
                        <term>overlap</term> within the proceedings of Balisage, the markup
                        conference.</note></p>
               </div>
            </div>
            <div xml:id="related-work">
               <head>Relevant Related Work</head>
               <p>Scholars have been working on topics like text modeling, text encoding, and markup
                  for decades, hence they are well-aware of the difficulties of representing complex
                  textual characteristics in an effective way. With <q>effective</q>, we mean
                     <q>with little to no additional workarounds or bespoke technical solutions</q>.
                  Because, as Fabio Vitali argued (<ref type="bibl" target="#vitali2016">Vitali
                     2016</ref>), one can theoretically use any datamodel to express any kind of
                  text, no matter how complex, as long as one is willing to use some workarounds, do
                  some extra coding, and handover certain tasks to other data formats. However, as
                  many have pointed out, extra coding typically has a negative effect on the
                  interoperability, interchangeability, reuseability or processing of the text
                  encoding (among others, see <ref type="bibl" target="#schmidt">Schmidt</ref>; <ref
                     type="bibl" target="#sper2008">Sperberg-McQueen and Huitfeldt 2008</ref>; <ref
                     target="#per2009" type="bibl">Peroni and Vitali 2009</ref>; <ref
                     target="#dekk2017" type="bibl">Dekker and Birnbaum 2017</ref>). The TEI
                  Guidelines offers a wide variety of different mechanisms to express information
                  about a textual feature, and no XML processor will be able to correctly interpret
                  these mechanisms unless it depends on a schema or some other document that
                  explains the intended meaning. In this contribution, we maintain the argument that
                  the more workarounds and handovers required, the more difficult it becomes to
                  process or query the text, and the less interchangeable or reuseable the encoded
                  text becomes.</p>
               <p>Finally, we cannot and should not ignore the importance of human readability and
                  usability: a data model that feels intuitive or natural to the user will in fact
                  boost the user’s interaction with the data. This resonates in the work of Claus
                  Huitfeldt and Michael Sperberg-McQueen who describe the value of having a data
                  structure that agrees in many ways with the <quote source="#quoteref4">ideal
                     structure ... as it exists in some human mind</quote> since that would
                  significantly ease encoding praxis (<ref target="#huit2003" type="bibl"
                     xml:id="quoteref4">Huitfeldt and Sperberg-McQueen 2003</ref>, section 2.4).
                  Elsewhere, they write that the mechanisms for handling overlap, like concurrent
                  markup, milestones, fragmentation, virtual elements, or standoff markup, <quote
                     source="#quoteref5">do not always exhibit the simplicity and clarity which make
                     SGML and XML attractive in simpler cases</quote> (<ref type="bibl"
                     target="#huit2006" xml:id="quoteref5">Huitfeldt and Sperberg-McQueen
                  2006</ref>). For all these reasons, the following paragraphs focus specifically on
                  existing data models and markup languages that handle non-linearity, discontinuity
                  and overlap in a natural, idiomatic way. </p>
               <p>Previous efforts to mapping approaches to modeling complex textual features can be
                  found with an actual map drawn by Wendell Piez at the <ref target="#piez2008"
                     type="bibl">2008 GODDAG workshop</ref>, the MLCD Overlap Corpus (<ref
                     type="bibl" target="#huit2012">Huitfeldt et al. 2010</ref>), and the tables
                  created by Fabio Vitali (<ref type="bibl" target="#vitali2016">2016</ref>). In
                  addition, we propose an overview of the existing data structures for modeling
                  complex textual features, see overzicht data structures <!-- NOTE: toevoegen -->.
                  In this overview, we follow the principle outlined above, that any data model can
                  theoretically express any kind of text feature if it is complemented with
                  workarounds or bespoke coding, but that this is not what we should aim for. In the
                  table, <q>yes</q> means the feature is natively supported in the datamodel. If a
                  feature is only supported with the help of a hack, a work-around or in the
                  application layer, it is taken as a <q>no</q>.</p>
               <div xml:id="non-linearity2">
                  <head>Non-linearity</head>
                  <p>The markup language TexMECS is designed as a linear representation for
                     non-linear objects modeled as a GODDAG data structure (<ref target="#huit2003"
                        type="bibl">Huitfeldt and Sperberg-McQueen 2003</ref>). In GODDAG, all
                     children of the markup nodes are typically ordered, but TexMECS provides a
                     notation to mark certain markup nodes as unordered. For example, a
                        <gi>subst</gi> element can be marked as unordered with the notation
                        <code>This is the
                        <!-- <|subst || <del| first |del> <add| second |add> ||subst|> -->
                        attempt</code> which means that its children are unordered. In those cases,
                     the GODDAG processor ignores the default linear order of the children of these
                     elements and as such TexMECS supports the representation of non-linear
                     structures. However, there is no known working implementation available. At
                     first glance, EARMARK (Extremely Annotated RDF Markup) also seems to support
                     the option to represent non-linearity: with EARMARK users can express different
                     linear structures using RDF statements about text fragments, and as such it’s
                     possible to describe multiple text orders (<ref type="bibl" target="#per2009"
                        >Peroni and Vitali 2009</ref>, section 4.1; <ref type="bibl"
                        target="#iorio2009">Di Iorio 2009</ref>). However, this is not the kind of
                     partially-ordereness as it is described in this contribution in the sense of
                     diverging and converging paths through the text. So while the underlying RDF
                     data model is flexible enough to express partially ordered information, the
                     EARMARK specification as described in (<ref type="bibl" target="#per2009"
                        >Peroni and Vitali 2009</ref>) doesn’t natively support it.</p>
               </div>
               <div xml:id="discontinuity2">
                  <head>Discontinuity</head>
                  <p>Discontinuity, by which we mean the encoding of a single continuous utterance
                     even though it is interrupted by one or more other structures, is also natively
                     supported in TexMECS. The syntax provides a notation to suspend and resume the
                     discontinuous markup elements (Sperberg-McQueen and Huitfeldt 2008), ensuring
                     that the datamodel GODDAG considers it one single unit, even though they appear
                     fragmented in the serialisation. In their EARMARK paper, Peroni and Vitali
                     mention that EARMARK is able to handle situations where <quote
                        source="#quoteref2">non-contiguous ranges are contained by a particular
                        markup item</quote> (<ref target="#per2009" type="bibl">2009</ref>) which
                     can be understood as a discontinuity situation. Let it be noted that there are
                     several widely used mechanisms in TEI XML to <q>aggregate</q> elements that
                     belong together but are necessarily separated because of the mono-hierarchical
                     structure of the implied datamodel. For instance, linking elements via the
                        <att>next</att> and <att>prev</att> attributes, via the <tag>join</tag>
                     element with <att>target</att> attributes, or via <att>xml:id</att> attributes.
                     Furthermore, there is the TEI XPointer scheme, part of the larger XPointer
                     framework of the W3C (<ref type="bibl" target="#TEI2019">TEI Guidelines</ref>,
                     chapter 16.2.4). Still, the TEI XML mechanisms fall short when held against the
                     criterion that the encoding method needs to be natively supported and
                     independent of any vocabulary-specific application layer.</p>
               </div>
               <div xml:id="overlap2">
                  <head>Overlapping textual structures</head>
                  <p>Considering the amount of attention given to <q>solving</q> the overlap
                     limitation posed by the XML data structure, it comes as no surprise that this
                     feature is supported by all alternative encoding approaches. Indeed, some have
                     been explicitly designed to accommodate more than one co-existing hierarchical
                     structure. Accordingly, overlapping structures are supported by the
                     aforementioned EARMARK and TexMECS, but also by the Concurrent XML approach
                     which also implements a GODDAG structure instead of the single hierarchy tree
                     model of XML (<ref type="bibl" target="#iacob2005">Iacob and Dekhtyar
                        2005</ref> and <ref target="#iacob2003" type="bibl">Iacob and Dekhtyar
                        2003</ref>). Another extension of XML designed to allow overlapping
                     structures is the Multi-Colored Trees (MCT) approach of <ref type="bibl"
                        target="#jaga2004">Jagadish et al. 2004</ref>. A single ordered tree is just
                     like an XML tree, but each colored tree defines its own local order of the
                     nodes it contains. In the MCT approach, individual nodes can be a part of
                     multiple colored trees; as a result, one node can be part of multiple
                     hierarchies. Furthermore, there is XCONCUR of <ref type="bibl"
                        target="#hil2005">Hilbert et al 2005</ref>, an XML implementation of SGML’s
                     CONCUR which allows encoders to express concurrent, overlapping markup
                     hierarchies over the same text nodes (hence the name). Other, non-XML based
                     data models that allow structures to overlap are the layered markup and
                     annotation language LMNL of Wendell Piez and Jenni Tennison (<ref type="bibl"
                        target="#piez2002">2002</ref>), which permits ranges of markup annotations
                     on a text stream to overlap.</p>
               </div>
            </div>
            <div xml:id="tag">
               <head>Text-As-Graph Model for text</head>
               <div xml:id="definition">
                  <head>TAG Definition of Text</head>
                  <p>The brief overview presented in the <ref type="crossref" target="#related-work"
                        >previous section</ref> shows that the past decades have witnessed multiple
                     initiatives to model textual features that do not fit naturally into the XML
                     model. These features include not only the infamous overlapping structures, but
                     also non-linear or discontinuous structures of text or markup. Each initiative
                     seems to have been partly pragmatic – how can we tackle the limitations of the
                     mono-hierarchical data model implied by SGML and XML? – partly driven by a
                     philosophical ambition to get closer to our inherent notions and assumptions of
                     text. The development of a suitable data model for representing text can
                     therefore not be separated from the search for the answer to the question what
                     text really is.</p>
                  <p>The balance between the ontological and the pragmatic side of text modeling has
                     previously been pointed out by <ref target="#renear1993" type="bibl">Allen
                        Renear et al</ref>; a practical illustration comes from Patrick Sahle, who
                     signalled that we are likely to ignore the textual aspects that are not part of
                     the TEI text encoding model (<ref target="#sahle2013" type="bibl">Sahle
                        2013</ref>). In short: if we use certain models long enough, they can
                     influence the way we think and argue about text. They can even – very subtly –
                     encourage us to ignore certain features that are not represented in that
                     particular model (<ref target="#dillen2015" type="bibl">Dillen 2015</ref>, p.
                     69 and in <ref target="#dekk2018" type="bibl">Haentjens Dekker et al,
                        2018</ref>.) </p>
                  <p>If we consider these technical and philosophical factors, it may be clear why a
                     clear definition of <term>text</term> was also at the core of the development
                     of the TAG model. As it is intended to natively support the textual features
                     described in <ref target="#features" type="crossref">section 2.2</ref>, the TAG
                     data model is based on the following definition of <term>text</term>: <q>text
                        is a multi-layered, non-linear object of information that can be at times
                        ordered, unordered and partially ordered</q>. In the context of historical
                     manuscripts, <term>multi-layered</term> is often used to describe a document on
                     which multiple stages of writing can be discerned. However, TAG understands
                        <term>multi-layered</term> as the possibility of a text to have one or more
                     layers of markup. Naturally, this markup is able to overlap, including
                     self-overlap. The term <term>non-linear</term>, then, builds upon the
                     description given <ref target="#nonlinearity" type="crossref">above</ref>. In
                     order to express this textual feature in the data model, the textual content of
                     a TAG document does not necessarily form a single ordered list of text tokens –
                     which is the case with document-centric XML – nor are the text tokens fully
                     unordered (cf. data-centric or record-based XML). In effect, TAG distinguishes
                     between three different orders of information: <list rend="inline">
                        <item>fully ordered (e.g., a string of characters);</item>
                        <item>unordered (e.g., a record database or metadata);</item>
                        <item>partially ordered (e.g., a revision on a manuscript page)</item>
                     </list>. As we will see, these affordances supports the modeling of three types
                     of information: textual content, textual variation, and markup.</p>
               </div>
               <div xml:id="model">
                  <head>TAG Model</head>
                  <p>The TAG definition of text has informed (and continues to inform) the design of
                     the TAG data model and the TAG markup stack. The model and the markup stack
                     work together to represent and process textual features as straightforward
                     manner. The goal is to avoid – as much as possible – any workarounds, and to
                     steer clear from unnecessarily handing over responsibility to the application
                     layer(s). The following paragraphs briefly discuss the relevant properties of
                     the TAG model and the associated markup language TAGML, for a more detailed
                     description see <ref type="bibl" target="#dekk2018">Haentjens Dekker et al.
                        2018, appendix A</ref>.</p>
                  <p>The underlying data model of TAG is a hypergraph for text. A hypergraph
                     consists of nodes and edges just like any other graph, but with the important
                     difference that the edges in a hypergraph can join together two or more nodes
                     (in contrast to the one-to-one edge in regular graphs). All edges in the TAG
                     hypergraph are undirected, which make the hypergraph a <term>cyclic
                        graph</term>. The TAG hypergraph consists of four types of nodes: <list
                        rend="inline">
                        <item>a Document node that serves as the root of the graph;</item>
                        <item>Text nodes;</item>
                        <item>Markup Nodes;</item>
                        <item>Annotation nodes</item>
                     </list>. The Text nodes are typically ordered; their order is derived from
                     their position from the Document Node. Using different types of hyperedges,
                     it’s possible to encode both fully ordered and partially ordered information,
                     as well as to encode that you do not know the order (e.g., in the case of
                     non-linearity). Explicitly encoding the order of the information means that the
                     hypergraph model of text is conceptually closer to the way a human reader
                     understands a text. The downside is that it’s computationally less efficient:
                     the TAG model needs to create a significant amount of edges to store the
                     different orders, while most data models simply assume that information is
                     always ordered. By all accounts, developing a data model is an incessant
                     process of balancing efficiency and expressivity. So far, we believe to have
                     found a workable equilibrum that makes the TAG model a powerful and intuitive
                     data model for text encoding.</p>
               </div>
               <div xml:id="syntax">
                  <head>TAG Markup Language (TAGML)</head>
                  <p>A datamodel can be expressed by markup. Because XML is defined by its syntax,
                     it may be good to emphasise here that syntax is not necessarily the same as a
                     data model. When the TAG data model was first presented in 2017, it did not
                     have its own syntax and could be serialised using LMNL or TexMECS notation. In
                     2018 we developed the syntax TAGML that has some special notations for encoding
                     complex textual features.<note>TAGML can be edited in any editor, but the open
                        source text editor Sublime has <ref
                           target="https://huygensing.github.io/tagml-sublime-syntax/">TAGML syntax
                           highlighting</ref> and the <ref
                           target="https://huygensing.github.io/alexandria/">reference
                           implementation Alexandria</ref> can be used to parse and validate TAGML
                        documents and store them as a TAG hypergraph.</note> With TAGML, encoders
                     can model textual information in the TAG hypergraph structure, and TAGML is
                     designed to make that modeling process as natural as possible. The following
                     three sections illustrate how the complex textual features highlighted in this
                     article can be expressed in TAGML. Since the TEI community is most familiar
                     with the properties of XML and the mono-hierarchical tree model, in the
                     following this paper will contrast the TAGML examples with XML. Each section
                     combines a syntactical representation with a visualisation of how the textual
                     information is stored the underlying datamodels.</p>
                  <p>A TAGML document is a UTF-8 encoded text with embedded markup. Special
                     characters are used to indicate the start and the end of a TAGML markup tag.
                     For every open tag, there should be a corresponding closing tag. <figure
                        xml:id="example_tagml_1">
                        <eg>&#91;root&#62; &#91;p&#62; Some text here &#60;p&#93;
                           &#60;root&#93;</eg>
                        <head type="legend">A simple TAGML document with a root node and a paragraph
                           node containing text.</head>
                     </figure>The looks of TAGML may ressemble those of existing markup languages
                     like XML, TexMECS or LMNL, but TAGML is in many ways more expressive. For
                     instance, in XML all annotation values are plain text, but TAGML offers
                     datatyping of annotations: users can make the date type of TAGML annotations
                     explicit and thus distinguish between numbers, strings of characters, booleans,
                     etc. Annotations can also be nested (annotations on annotations) or combine
                     text and markup (<term>rich text</term>). For a full overview of TAGML’s
                     features, we refer to <ref
                        target="https://github.com/HuygensING/TAG/tree/master/TAGML">the
                        website</ref> and to <ref target="#dekk2018" type="bibl">Haentjes Dekker et
                        al. 2018</ref>. For the purposes of this contribution, it suffices to know
                     that where the TAG model presents a more powerful and inclusive data model for
                     text, TAGML offers encoders the chance to express their interpretation of that
                     text in a more refined and explicit way. The following three sections
                     illustrate how the complex textual features highlighted in this article can be
                     expressed in TAGML.</p>
               </div>
            </div>
            <div xml:id="expressing-features">
               <head>Expressing Complex Textual Features in TAGML</head>
               <p>While there are different mechanisms to encode the textual features in this
                  section – TEI XML, TexMECS, LMNL – we assume that the TEI community is most
                  familiar with the properties of XML and its mono-hierarchical tree model.
                  Therefore, we will contrast the TAGML examples with XML examples. There’s at least
                  three important points on which TAGML diverges from XML:<list rend="ordered">
                     <item>it has asymmetrical tags: <eg>&#91;markup&#62; some text
                           &#60;markup&#93;</eg></item>
                     <item>you can use it to express not just strings and markup, but other data
                        types as well, like numbers or boolean values: <eg>&#91;poem
                           type=&#39;limerick&#39; year=1818 rhymes=true&#62; some text
                           &#60;poem&#93;</eg></item>
                     <item>you can nest annotations: <eg>&#91;origin location={position={x=1 y=2}
                           country=&#39;nl&#39;}&#62; Amsterdam &#60;origin&#93;</eg></item>
                  </list> Each of the three sections below section combines a syntactical
                  representation (TEI XML and TAGML) with a visualisation of how the textual
                  information is stored the underlying datamodels (a tree and a hypergraph). For
                  reasons of clarity and readability, the markup examples are simplified.
                  <!-- Toevoegen: These are simple examples, TAGML can also handle complex cases --></p>
               <div xml:id="nonlinearity3">
                  <head>Non-linearity</head>
                  <div xml:id="deletion2">
                     <head>Deletion</head>
                     <p>As explained in the section on <ref type="crossref" target="#nonlinearity"
                           >non-linearity</ref> above, in-text revisions like deletions form a clear
                        example of non-linear textual structures. They can be described as two
                        simultaneous paths through a text, one path including the deleted characters
                        and one path without the deleted characters. In the Woolf-example, the
                           <gi>del</gi> marks the beginning of the forking of these paths. This
                        could be expressed in TEI XML as follows <egXML
                           xmlns="http://www.tei-c.org/ns/Examples"><root> ... difference of
                              opinion, <del>impossible barriers</del> prejudices ... </root></egXML>
                        The TAGML notation looks quite similar: <eg>&#91;root&#62; ... difference of
                           opinion, &#91;?del&#62; impossible barriers &#60;?del&#93; prejudices...
                           &#60;root&#93;</eg>. Note however that the <eg>del</eg> is marked as
                           <term>optional</term> by preceeding it with a <q>?</q>. This indicates
                        that there are two paths through the text: one with the text marked up by
                           <eg>del</eg>, and one without. This subtle yet important difference
                        becomes more clear in a visualition: <figure xml:id="XML-del">
                           <graphic url="img/single-del-xml.png" width="310px" height="490px"/>
                           <head type="legend">Representation of the XML tree of the code
                              example.</head>
                        </figure>
                        <figure xml:id="TAGML-del">
                           <graphic url="img/single-del-tagml.png" width="410px" height="490px"/>
                           <head type="legend">Representation of the TAGML hypergraph of the code
                              example. The graph is read from left to right, similar to a regular
                              variant graph, starting with the Document root node. The Markup nodes
                                 <q>root</q> and <q>del</q> are connected to the relevant Text nodes
                              by means of a hyperedge. The visualisation clearly shows the two paths
                              or <term>branches</term> through the text. </head>
                        </figure>
                     </p>
                  </div>
                  <div xml:id="immediate-del2">
                     <head>Immediate deletion</head>
                     <p>It is difficult to capture the exact nature of a revision made
                           <term>currente calamo</term> in XML. The textual feature is usually
                        encoded by placing an attribute on the <gi>del</gi>, e.g., a <att>rend</att>
                        with the <val>immediate</val> or a <att>seq</att> with the <val>0</val> to
                        indicate the revision is part of the first writing spell. The example used
                        in <ref type="crossref" target="#immediate_del">the section above</ref>
                        could be encoded in TEI P5 as follows: <egXML
                           xmlns="http://www.tei-c.org/ns/Examples"><root><del seq="0">This</del>
                              the idea has grown ...</root></egXML>. Without an application-level
                        schema, however, an XML processor would have no way of knowing what the
                        attributes <att>rend</att> or <att>seq</att> represent. In TAGML, it is
                        possible to make this subtle distinction: <eg>&#91;root&#62;
                           &#91;del&#62;This&#60;del&#93; The idea has grown... &#60;root&#93;</eg>.
                        By omitting the <q>?</q> we indicate that the <q>del</q> tag is not
                        optional: it is part of the sentence and there is just one path through the
                        text. We see this clearly by contrasting the XML tree with the hypergraph
                        visualisation: <figure xml:id="XML-immediate-del">
                           <graphic url="img/currente-del-xml.png" width="310px" height="490px"/>
                           <head type="legend">Representation of the XML tree of the code example of
                              the immediate deletion. To an XML processor that does not have access
                              to additional information in the application layer, the immediate
                              deletion is undistinguishable from a regular deletion.</head>
                        </figure>
                        <figure xml:id="TAGML-immediate-del">
                           <graphic url="img/currente-del-tagml.png" width="410px" height="490px"/>
                           <head type="legend">Representation of the TAGML hypergraph of the code
                              example of the immediate deletion. The Markup nodes <q>root</q> and
                                 <q>del</q> are connected to the relevant Text nodes by means of a
                              hyperedge. The visualisation clearly shows that there is just one path
                              through the text, which corresponds closely to how we interpreted the
                              source manuscript.</head>
                        </figure></p>
                  </div>
                  <div xml:id="grouped-rev2">
                     <head>Grouped Revision</head>
                     <p>As for grouped revisions, we already noted that TEI guidelines suggest to
                        use the <gi>subst</gi> element to gather <gi>del</gi> and <gi>add</gi> if
                        the encoder believes they belong together semantically. The TEI Guidelines
                        write that <quote source="#quoteref6">the purpose of this element is solely
                           to group its child elements together, the order in which they are
                           presented is not significant.</quote><ref xml:id="quoteref6" type="bibl"
                           target="#TEI2019">TEI P5, chapter 11.3.1.5</ref>. In other words: the
                           <gi>subst</gi> element functions as an indication of a split in the
                        text’s stream. This is very similar to the TAGML mechanism to encode a split
                        (a <term>branching</term>) in the text’s stream: the divergence of the text
                        stream is flagged with <eg>&#60; &#124;</eg>, the individual branches are
                        separated with a vertical bar <eg>&#124;</eg> and the converging of the
                        branches is indicated with a <eg>&#124; &#62;</eg>. The grouped revision
                        example given <ref type="crossref" target="#grouped_rev">above</ref> can
                        therefore be transcribed as follows in TEI XML: <egXML
                           xmlns="http://www.tei-c.org/ns/Examples"><root> ... for being
                                    <subst><del>so</del><add>certainly</add></subst> disagreeable
                              ...</root></egXML>. In TAGML notation: <eg>&#91;root&#62; ... for
                           being &#60; &#124; &#91;del&#62;so&#60;del&#93; &#124;
                           &#91;add&#62;certainly&#60;add&#93; &#124; &#62; disagreeable...
                           &#60;root&#93;</eg>. On the level of the data model, though, there are
                        significant differences. <figure xml:id="XML-grouped-rev">
                           <graphic url="img/grouped-revision-xml.png" width="310px" height="490px"/>
                           <head type="legend">Representation of the XML tree of the code example of
                              the grouped revision. If the text nodes in this XML tree would be
                              parsed, they would be considered ordered. Again, an XML processor
                              needs to have access to additional information in the application
                              layer before it knows that the <gi>subst</gi> tag indicates a
                              momentarily suspension of the order of its children <gi>del</gi> and
                                 <gi>add</gi>.</head>
                        </figure>
                        <figure xml:id="TAGML-grouped-rev">
                           <graphic url="img/grouped-rev-tagml.png" width="410px" height="490px"/>
                           <head type="legend">Representation of the TAGML hypergraph of the code
                              example of the grouped revision. The Markup nodes <q>root</q> and
                                 <q>del</q> are connected to the relevant Text nodes by means of a
                              hyperedge. The visualisation clearly shows that there there are two
                              paths through the text, which corresponds with our interpretation of a
                              grouped revision. The Text nodes <q>so</q> and <q>certainly</q> are
                              both on the same rank from the root Document node; the order of the
                              text stream being temporarily suspended.</head>
                        </figure></p>
                  </div>
               </div>
               <div xml:id="discontinuity3">
                  <head>Discontinuity</head>
                  <p>There are quite some mechanisms to express discontinuous structures in XML but
                     all of them require quite extensive tagging as well as an application layer
                     with information about how to interpret those tags. For example, using the
                        <att>prev</att> and <att>next</att> mechanism, the <ref
                        target="#discontinuity1" type="crossref">example</ref> of discontinuity
                     would look as follows: <egXML xmlns="http://www.tei-c.org/ns/Examples"><root>
                           <q xml:id="1" next="#2">"Dear Marion:</q> (wrote Ada.) <q xml:id="2"
                              prev="#1"> We are all very glad..."</q>
                        </root></egXML>. Similar to TexMECS, users can encode discontinuity in TAGML
                     in a more compact way that does not require generating unique IDs for the
                        <gi>q</gi> element. Instead, users can indicate that the <q>q</q> element is
                     paused and subsequently resumed with the <q>-</q> and the <q>+</q> signs:
                        <eg>&#91;root&#62; &#91;q&#62;"Dear Marion&#60;-q&#93; (wrote Ada)
                        &#91;+q&#62; We are all very glad...&#60;q&#93; &#60;root&#93;</eg>. The
                     visualisations of the respective data models clearly show the difference: in
                     the XML encoding, the sentence contains two separate <gi>q</gi> elements that
                     are only connected on the application level; the TAGML encoding stresses that
                     the text nodes tagged with the <q>q</q> markup element are part of one and the
                     same quotation: <figure xml:id="XML-discontinuity">
                        <graphic url="img/discont1-xml.png" width="310px" height="490px"/>
                        <head type="legend">Representation of the XML tree of the discontinuity
                           example, showing how the XML tree has two separate <gi>q</gi> elements.
                           The <att>next</att> and <att>prev</att> attributes are represented as
                           labels on the markup nodes. An XML processor would need to have access to
                           additional information in the application layer before it knows that the
                           contents of the <gi>q</gi> elements belong together semantically.</head>
                     </figure>
                     <figure xml:id="TAGML-discontinuity">
                        <graphic url="img/discont1-tagml.png" width="410px" height="490px"/>
                        <head type="legend">Representation of the TAGML hypergraph of the
                           discontinuity example. The Markup node <q>q</q> is connected to the
                           relevant Text nodes by means of a hyperedge. The visualisation clearly
                           shows that there there is just one <q>q</q> element. This information is
                           available at the level of the model and can be parsed and processed
                           without additional information.</head>
                     </figure></p>
               </div>
               <div xml:id="overlap3">
                  <head>Overlapping Textual Structures</head>
                  <p>Last but not least: overlapping structures. As mentioned <ref type="crossref"
                        target="#definition">above</ref>, the TAG model uses <term>layers</term> to
                     group together a hierarchically structured set of markup elements. Layers can
                     share both Text nodes and Markup nodes. Simply put, layers in TAGML ensure that
                     one can structure a TAGML document without worrying about overlap. Consider a
                     base transcription of text characters to which one or more layers of markup are
                     added. The markup within each layer is hierarchically ordered, but together the
                     layers represent differently structured information. For example: the markup in
                     layer 1 expresses information about the document’s structure (page -> line)
                     while the markup in layer 2 conveys the structure of the book (book -> chapter
                     -> sentence). In theory, encoders can create as many layers as they want. We
                     identify at least three purposes of layers: <list rend="ordered">
                        <item>Technical: preventing (self)overlapping structures within a TAGML
                           file</item>
                        <item>Practical: generate different views from a TAGML file</item>
                        <item>Collaborating: identifying different perspectives on the same source
                           document</item>
                     </list>. This section only discusses the first function in the context of
                     encoding overlapping structures. In XML TEI P5, <ref target="#discontinuity2-1"
                        type="crossref">the overlap example</ref> could be encoded using the
                        <gi>delSpan</gi> mechanism: <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <root>
                           <div type="page">
                              <delSpan spanTo="#1"/>
                              <p>
                                 <s><!-- some text --></s>
                              </p>
                           </div>
                           <div type="page">
                              <p>
                                 <s><!-- some text --></s>
                              </p>
                              <anchor xml:id="1"/>
                           </div>
                        </root>
                     </egXML> In TAGML, we can combine the mechanism to encode discontinuity with
                     the layer functionality. We will create two layers: <list rend="inline">
                        <item>one layer for the documentary structure containing the pages and the
                           sentences, with the layer identifier <q>D</q></item>
                        <item>one for the textual structure with the deletion and the sentences,
                           with the layer identifier <q>T</q></item>
                     </list>. A simplification of the transcription would look as follows: <figure
                        xml:id="example-tagml-layers">
                        <eg>[root|+T,+D> [page|D> [del|T> [s|T,D> [! some text !] &lt;s] &lt;-del]
                           &lt;page] [page|D> [+del|T> [s|T,D> [! some text !] &lt;s] &lt;del] &lt;page]
                           &lt;root]</eg>
                        <head type="legend">A simplified example of encoding discontinuous and
                           overlapping structures in TAGML.</head>
                     </figure>If we look once more at the visualisations of the underlying data
                     structures, we clearly see that it is not possible to encode in XML that the
                     deletion spans over multiple paragraphs and multiple <gi>div</gi> elements. The
                     visualisation of the TAG hypergraph shows that the Text nodes are all contained
                     by one <q>del</q> element (indicated with the green hyperedge labelled
                        <q>del</q>). <figure xml:id="XML-overlap">
                        <graphic url="img/discont2-xml.png" width="310px" height="490px"/>
                        <head type="legend">Representation of the XML tree of the overlap example.
                           To an XML processor is is not clear that the <gi>delSpan</gi> element is
                           related to the <gi>p</gi> and the <gi>s</gi> elements.</head>
                     </figure>
                     <figure xml:id="TAGML-overlap">
                        <graphic url="img/discont2-tagml.png" width="410px" height="490px"/>
                        <head type="legend">Representation of the TAGML hypergraph of the overlap
                           example. The Markup node <q>del</q> is connected to the relevant Text
                           nodes by means of a hyperedge. The visualisation clearly shows that there
                           there is just one <q>del</q> element, regardless of the overlap. This
                           information is available at the level of the model and can be parsed and
                           processed without additional information.
                           <!-- TODO: update visualisatie met layer ID? Toevoegen van MCT visualisatie? Kan misschien te verwarrend worden... --></head>
                     </figure></p>
               </div>
            </div>
            <div xml:id="conclusion">
               <head>Conclusion</head>
               <p><!-- Something like: Following the truisms that encoding is modeling and that encoding implies
                  communicating an interpretation, we aim to demonstrate how TAGML provides editors
                  with more eloquence in expressing their interpretation of the variance as well as
                  the creative process.TAG’s graph model required us to invent a new markup language
                  with which you could tag those complex textual occurrences we mentioned above:
                  different coexisting structures, discontinuous elements, etc. A markup language is
                  more than just a syntax: it also requires a schema – to validate the syntax – and
                  a query language to, well, query the documents. -->
               </p>
            </div>
            <div xml:id="discussion">
               <head>Discussion</head>
               <!-- this section includes "Future Work" -->
            </div>
         </div>
      </body>

      <back>
         <div type="bibliography">

            <listBibl>

               <bibl xml:id="pier2015"><author>Pierazzo, Elena</author>. <date>2015</date>.
                     <title>Digital Scholarly Editing: Theories, Models and Methods.</title>
                  <pubPlace>Surrey</pubPlace>: <publisher>Ashgate</publisher>.</bibl>

               <bibl xml:id="moret2000"><author>Moretti, Franco</author>. <date>2000</date>. <title
                     level="a">Conjectures on World Literature</title>. <title level="m">New Left
                     Review</title>, <biblScope unit="volume">2</biblScope>, <ref
                     target="https://newleftreview.org/II/1/franco-moretti-conjectures-on-world-literature "
                     >online </ref>available.</bibl>
               <bibl xml:id="piez2002"><author>Piez, Wendell</author> and <author>Jenni
                     Tennison</author>. <date>2002></date>. <title level="a">The Layered Markup and
                     Annotation Language (LMNL)</title>. <title level="m">Proceedings of Extreem
                     Markup Languages</title>.</bibl>

               <bibl xml:id="hil2005"><author>Hilbert, Mirco</author>, <author>Oliver
                     Schonefeld</author> and <author>Andreas Witt</author>. <date>2005</date>.
                     <title level="a">Making CONCUR work.</title><title level="m">Proceedings of
                     Extreem Markup Languages</title>. </bibl>

               <bibl xml:id="jaga2004"><author>Jagadish, H. V.</author>, <author>Laks
                     Lakshmanan</author>, <author>M. Scannapieco</author>, <author>D.
                     Srivastava</author>, and <author>N.
                     Wiwatwattana</author>.<date>2004</date>.<title>Colorful XML: one hierarchy
                     isn’t enough.</title> Presented at the SIGMOD conference 2004 in Paris, France.
                     doi:<idno>https://doi.org/10.1145/1007568.1007598.</idno></bibl>

               <bibl xml:id="iacob2005"><author>Iacob, Ionut Emil</author> and <author>Alex
                     Dekhtyar</author>. <date>2005</date>
                  <title level="a">Towards a query language for multihierarchical XML: revisiting
                     XPath.</title>
                  <title level="m">Eighth International Workshop on the Web and Databases</title>,
                  June 16–17, 2005, Baltimore, Maryland, USA. <ref
                     target="http://users.csc.calpoly.edu/%7Edekhtyar/publications/webdb05.pdf"
                  /></bibl>

               <bibl xml:id="iacob2003">Iacob, Ionut E. and Alex Dekhtyar. <date>2003</date>.
                     <title>A framework for management of concurrent XML markup.</title>
                  <title level="m">XML Schema and Data Management ’03.</title>
                  <ref
                     target="http://users.csc.calpoly.edu/%7Edekhtyar/publications/xsdm03.concurrent.pdf"
                  />
               </bibl>

               <bibl xml:id="renear1993"><author>Renear, Allen</author>, Renear, <author>Elli
                     Mylonas</author>, and <author>David Durand</author>. <date>1993</date>.
                     <title>Refining our Notion of What Text Really Is: The Problem of Overlapping
                     Hierarchies</title>. Available <ref
                     target="https://www.ideals.illinois.edu/bitstream/handle/2142/9407/RefiningOurNotion.pdf"
                     >online</ref>.</bibl>

               <bibl xml:id="dekk2017"><author>Haentjens Dekker, Ronald</author> and <author>David
                     J. Birnbaum</author>. <date>2017</date>. <title level="a">It’s More Than Just
                     Overlap: Text As Graph</title><title level="m">Proceedings of Balisage: The
                     Markup Conference 2017</title><series>Balisage Series on Markup
                     Technologies</series>, <biblScope unit="volume">19</biblScope>,
                     doi:<idno>https://doi.org/10.4242/BalisageVol19.Dekker01</idno></bibl>

               <bibl xml:id="dekk2018"><author>Haentjens Dekker, Ronald</author>, <author>Elli
                     Bleeker</author>, <author>Bram Buitendijk</author>, <author>Astrid
                     Kulsdom</author> and <author>David J. Birnbaum</author>. <date>2018</date>.
                     <title level="a">TAGML: a Markup Language of Many Dimensions</title><title
                     level="m">Proceedings of Balisage: The Markup Conference 2018</title>.
                     <series>Balisage Series on Markup Technologies</series>, <biblScope
                     unit="volume">21</biblScope>,
                     doi:<idno>https://doi.org/10.4242/BalisageVol21.HaentjensDekker01</idno></bibl>

               <bibl xml:id="sper2008"><author>Sperberg-McQueen, Michael</author> and <author>Claus
                     Huitfeldt</author>. <date>2008</date>
                  <title level="a">Markup Discontinued. Discontinuity in TexMecs, GODDAG Structures,
                     and Rabbit/Duck Grammars</title><title level="m">Proceedings of Balisage: The
                     Markup Conference 2008</title>. <series>Balisage Series on Markup
                     Technologies</series>, <biblScope unit="volume">1</biblScope>,
                     doi:<idno>https://doi.org/10.4242/BalisageVol1.Sperberg-McQueen01</idno></bibl>

               <bibl xml:id="huit2003"><author>Huitfeldt, Claus</author> and
                     <author>Sperberg-McQueen, Michael</author>. <date>2001</date>, revised
                     <date>2003</date>. <title>TexMECS: An experimental markup meta-language for
                     complex documents</title>. <ref
                     target="http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html"/></bibl>

               <bibl xml:id="sahle2013"><author>Sahle, Patrick</author>. <date>2013</date>.
                     <title>Digitale Editionsformen-Teil 3: Textbegriffe Und Recodierung</title>.
                     <pubPlace>Norderstedt</pubPlace>: <publisher>Books on Demand</publisher>.
                     DOI:<idno>http://kups.ub.uni-koeln.de/5353/</idno>.</bibl>

               <bibl xml:id="huit2006"><author>Huitfeldt, Claus</author> and
                     <author>Sperberg-McQueen, Michael</author>. <date>2006</date>. <title level="a"
                     >Representation and processing of Goddag structures: implementation strategies
                     and progress report</title>. <title level="m">Proceedings of Extreem Markup
                     Languages 2006</title><ref
                     target="http://conferences.idealliance.org/extreme/html/2006/Huitfeldt01/EML2006Huitfeldt01.html"
                  /></bibl>

               <bibl xml:id="per2009"><author>Peroni, Sylvio</author> and <author>Fabio
                     Vitali</author>. <date>2009</date>. <title>Annotations with EARMARK for
                     Arbitrary, Overlapping and Out-of-Order Markup</title>. <title level="m"
                     >Proceedings of the 2009 ACM Symposium on Document Engineering</title>.
                     <idno>10.1145/1600193.1600232</idno></bibl>

               <bibl xml:id="woolf1927"><author>Woolf, Virginia</author>. <date>1927</date>.
                     <title>To the Lighthouse</title>, Holograph ms. Berg Collection, New York
                  Public Library. <editor>Pamela L. Caughie</editor>, <editor>Nick Hayward</editor>,
                     <editor>Mark Hussey</editor>, <editor>Peter Shillingsburg</editor>, and
                     <editor>George K. Thiruvathukal</editor><ref
                     target="http://www.woolfonline.com">Woolf Online</ref>.</bibl>

               <bibl xml:id="TEI2019">TEI Consortium. <date>2013</date>. <title>TEI P5: Guidelines
                     for Electronic Text Encoding and Interchange</title>. Version 2.5.0. Last
                  updated July 26. N.p.: <ref
                     target="http://www.tei-c.org/Vault/P5/2.5.0/doc/tei-p5-doc/en/html/">TEI
                     Consortium</ref>.</bibl>

               <bibl xml:id="watanna1916"><author>Watanna, Onoto</author>. <date>1916</date>.
                     <title>Marion, the Story of an Artist’s Model</title>. <pubPlace>New
                     York</pubPlace>: <publisher>W.J. Watt</publisher>.
                     <idno>u#rn:oclc:record:1048793515</idno>.</bibl>

               <bibl xml:id="dillen2015"><author>Dillen, Wout</author>. <date>2015</date>.
                     <title>Digital Scholarly Editing for the Genetic
                     Orientation</title><publisher>University of Antwerp</publisher>, PhD
                  dissertation. <ref target="https://repository.uantwerpen.be/desktop/irua"/></bibl>

               <bibl xml:id="bleeker2017"><author>Bleeker, Elli</author>.
                     <date>2017</date>.<title>Mapping Invention in Writing: Digital Infrastructure
                     and the Role of the Genetic Editor</title>. <publisher>University of
                     Antwerp</publisher>, PhD dissertation. <ref
                     target="https://repository.uantwerpen.be/docman/irua/e959d6/155676.pdf"/>
                  /></bibl>

               <bibl xml:id="brulez1927"><author>Brulez, Raymond</author>. <date>1927</date>.
                     <title>Sheherazade of Literatuur als Losprijs</title>, typescript quarto.
                     <idno>AMVC Letterenhuis B917/H2bis</idno>.</bibl>

               <bibl xml:id="vitali2016"><author>Vitali, Fabio</author>. <date>2016</date>.
                     <title>The Expressive Power of Digital Formats</title>. Workshop <ref
                     target="http://dixit.uni-koeln.de/wp-content/uploads/Vitali_Digital-formats.pdf"
                     >presentation </ref>at the DiXiT convention 2 University of Cologne.</bibl>

               <bibl xml:id="schmidt"><author>Schmidt, Desmond</author>. <title>Standoff properties
                     as an alternative to XML for digital historical editions</title>. <ref
                     target="https://discourse.suttacentral.net/uploads/default/original/2X/6/6056afc3c25fcf0e9b3e677c04ea4bc34b8151ab.pdf"
                  /></bibl>

               <bibl xml:id="piez2008"><author>Piez, Wendell</author>. <date>2008</date>.
                     <title>LMNL in Miniature: an Introduction</title>. <ref
                     target="http://piez.org/wendell/LMNL/Amsterdam2008/presentation-slides.html"
                     >Paper</ref> given at the Amsterdam GODDAG workshop, 1 to 5 December
                  2008.</bibl>

               <bibl xml:id="huit2012"><author>Marcoux, Yves</author>, <author>Claus
                     Huitfeldt</author> and <author>Michael Sperberg-McQueen</author>.
                     <date>2012</date>. <title level="a">The MLCD Overlap Corpus (MOC): Project
                     Report</title>. <title level="m">Proceedings of Balisage: The Markup Conference
                     2012</title>. <series>Balisage Series on Markup Technologies</series>,
                     <biblScope unit="volume">8</biblScope>
                     doi:<idno>https://doi.org/10.4242/BalisageVol8.Huitfeldt02.</idno></bibl>

               <bibl xml:id="iorio2009"><author>Di Iorio, Angelo</author>, <author>Silvio
                     Peroni</author> and <author>Fabio Vitali</author>. <date>2009</date>. <title
                     level="a">Towards markup support for full GODDAGs and beyond: the EARMARK
                     approach</title>. <series>Balisage Series on Markup Technologies</series>,
                     <biblScope unit="volume">vol. 3</biblScope>. doi:<idno type="doi"
                     >https://doi.org/10.4242/BalisageVol3.Peroni01</idno>.</bibl>
            </listBibl>
         </div>
      </back>
   </text>
</TEI>
